<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">

<channel>
<title>Nimai's Tech Blog</title>
<link>https://nimaipatel.netlify.app/</link>
<description>Grow with Technology</description>

<item>
<title>The Problem with Caps Lock</title>
<link>https://nimaipatel.netlify.app/blog/the-problem-with-caps-lock/</link>
<description>
<![CDATA[
<p>
<p>The <code>Caps Lock</code> key is probably the most useless key on modern computer
keyboards. However, it is placed in one of the most convenient positions in the
home row. Not mapping it to anything else is just wasting its potential. What I
like to do is map <code>Caps Lock</code> by itself to the <code>Esc</code> key and <code>Caps Lock</code> +
<code>&lt;key&gt;</code> to <code>Ctrl</code> + <code>&lt;key&gt;</code>.</p>
<p>I then map <code>shift</code> + <code>Caps Lock</code> to <code>Caps Lock</code> for the rare occasions on which
I do need to use it.</p>
<p>I achieve this using a script which depends on <code>xcape</code> and <code>xmodmap</code> (assuming
you're using a US keyboard layout):</p>
<pre><code>#!/bin/sh
setxkbmap -layout us
killall xcape 1&gt;/dev/null 2&gt;&amp;1
xmodmap -e 'clear lock'
xmodmap -e 'clear control'
xmodmap -e 'add control = Caps_Lock Control_L Control_R'
xmodmap -e 'keycode 66 = Control_L Caps_Lock NoSymbol NoSymbol'
xcape   -e 'Control_L=Escape'
</code></pre>
<p>This way I can achieve:</p>
<pre><code>CapsLock =&gt; Esc
CapsLock + &lt;Key&gt; =&gt; Ctrl + &lt;Key&gt;
Shift + CapsLock =&gt; CapsLock
</code></pre>
<h1>But... Why?</h1>
<p>Well, <code>Esc</code> and <code>Ctrl</code> keys are two of the most utilizable keys. Ironically,
they are placed in the worst possible place on a keyboard. <code>Esc</code> is used for
switching from insert mode to normal mode in vim and <code>Ctrl</code> is the most commonly
used modifier in most programs.</p>
<p>I have been using this setup for months now, and I'm sure my wrists would thank
me for it if they could.</p>
&nbsp;
</p>
]]>
</description>
<pubDate>Wed, 29 Dec 2021 00:00:00 +0000</pubDate>
</item>
<item>
<title>Compiling a Custom Iosevka Font on Arch Linux</title>
<link>https://nimaipatel.netlify.app/blog/compiling-custom-iosevka/</link>
<description>
<![CDATA[
<p>
<p>I personally am somewhat of a font</p>
<h1>Step One: Initializing the git repository</h1>
<p>This is as simple as running the commands:</p>
<pre><code>$ mkdir &quot;${XDG_CONFIG_HOME}/cfg&quot;
$ git init --bare &quot;${XDG_CONFIG_HOME}/cfg/.git/&quot;
</code></pre>
<p>If you've used git for any period of time then you know that the <code>git init</code>
command initializes an empty repository in the folder that you're currently in.
Since we want to create a bare repository, we pass the <code>--bare</code> flag and the
location of the git folder. This should create a <code>.git</code> folder in
<code>~/.config/cfg</code>. If you inspects its contents you'll find that they are similar
to any other repository's <code>.git</code> folder.</p>
<h1>Step Two: Accessing the repository via an alias/function</h1>
<p>Add the following line to your .zshrc or .bashrc along with the rest of your
aliases:</p>
<pre><code>cfg() { git --git-dir=&quot;${XDG_CONFIG_HOME}/cfg/.git/&quot; --work-tree=&quot;$HOME&quot; &quot;$@&quot; ; }
</code></pre>
<p>This function will allow us to stage and commit files to our backup repository.
The <code>--git-dir</code> flag specifies the git repository we made in step one and
<code>--work-tree</code> will allow us to track any file in our <code>$HOME</code> directory
using the repo.</p>
<h1>Step Three: Ignoring files we don't want to backup</h1>
<p>Run <code>exec $SHELl</code> or restart your terminal to make the alias we made in the
previous step available. Then, run the following command, so that the
repository doesn't display the hundreds of files in your home directory every
time you check it's <code>status</code>:</p>
<pre><code>$ cfg config --local status.showUntrackedFiles no
</code></pre>
<h1>Step Four: Setup a remote repository</h1>
<p>Create an empty remote repository (I will be using GitHub) and get its SSH or
HTTP. On GitHub this is immediately available after the repo is created.
Finally add the remote with:</p>
<pre><code>$ cfg remote add origin &lt;URL&gt;
</code></pre>
<p>At this point you can simply do something like:</p>
<pre><code>$ cfg add ~/.vimrc
$ cfg commit -m &quot;Adding .vimrc&quot;
$ cfg push origin master
</code></pre>
<p>This will make the repository start tracking your .vimrc and you can commit
and push the file to GitHub. Pretty much all git commands like <code>status</code> and
<code>diff</code> should now be available to you with the <code>cfg</code> function.</p>
<h1>Getting your dotfiles on a new system:</h1>
<p>Now all you have to do on a new system is run the following commands
and you'll have all your settings back:</p>
<pre><code>git init --bare &quot;${XDG_CONFIG_HOME}/cfg/.git/&quot;
cfg() { git --git-dir=&quot;${XDG_CONFIG_HOME}/cfg/.git/&quot; --work-tree=&quot;$HOME&quot; &quot;$@&quot; ; }
cfg config --local status.showUntrackedFiles no
cfg remote add origin https://github.com/nimaipatel/dotfiles.git
cfg pull origin master
</code></pre>
<p>You might get some errors if you already have, say, a .zshrc in your new
system. In this case you probably would want to delete this before pulling
your files from the remote.</p>
<p>That's it we're done ðŸ¥³. Please do tell me if you face any issues with the
script, in case you use it!</p>
&nbsp;
</p>
]]>
</description>
<pubDate>Sun, 17 Oct 2021 00:00:00 +0000</pubDate>
</item>
<item>
<title>Rust Style Expressions in Other Programming Languages</title>
<link>https://nimaipatel.netlify.app/blog/rust-style-block-expressions-in-other-languages/</link>
<description>
<![CDATA[
<p>
<p>Lets say we have a variable <code>animal</code> and we want to initiate the value of a
variable <code>sound</code> based on the value of <code>animal</code>. In JavaScript, we could do
something like this:</p>
<pre><code>let sound;
if (animal === 'dog') {
    sound = 'barks';
} else if (animal === 'cat') {
    sound = 'meows';
}
</code></pre>
<p>While this solution works as expected, if you're obsessed with functional
programming like I am, the use of <code>let</code> in a codebase that otherwise adheres to
FP concepts as much as possible might bother you.</p>
<p>The immutable solution in this case is actually pretty simple though. We can
just use a ternary operator in the assignment for <code>sound</code></p>
<pre><code>const sound = animal === 'dog' ? 'barks' : 'meows'
</code></pre>
<p>Well, this kinda works. The problem is that <code>sound</code> is assigned <code>'meows'</code> as long
<code>animal</code> isn't <code>'dog'</code>. So even if <code>animal</code> was <code>'pig'</code>, <code>sound</code> would be assigned
<code>'meows'</code>! Also, what do we do if we have more than two types of animals? We
could start nesting ternary operators, but that would get ugly quickly!</p>
<p>Now the Rust programming language has a syntactically clean solution to this
problem.</p>
<pre><code>/* variables are immutable by default in Rust */
let sound = {
    if animal == &quot;dog&quot; {
        &quot;barks&quot;
    } else if animal == &quot;cat&quot; {
        &quot;meows&quot;
    } else if animal == &quot;pig&quot; {
        &quot;oinks&quot;
    } else {
        &quot;not valid animal&quot;
    }
}
</code></pre>
<p>Expressions inside braces in Rust can evaluate to values. This means you can
use control flow key words like if-else statements and loops during the
assignment of variables.</p>
<p>Now how do we go about doing something similar in other programming languages
like JavaScript? Well, we can use anonymous functions and immediately call
them on assignment.</p>
<pre><code>const sound = (() =&gt; {
    if (animal === &quot;dog&quot;) {
        return &quot;barks&quot;
    } else if (animal === &quot;cat&quot;) {
        return &quot;meows&quot;
    } else if (animal === &quot;pig&quot;) {
        return &quot;oinks&quot;
    }
})()
</code></pre>
<p>Great! And it doesn't look that bad either, no?</p>
&nbsp;
</p>
]]>
</description>
<pubDate>Sat, 29 May 2021 00:00:00 +0000</pubDate>
</item>
<item>
<title>Yet Another Guide on Managing Dotfiles</title>
<link>https://nimaipatel.netlify.app/blog/yet-another-guide-on-managing-dotfiles/</link>
<description>
<![CDATA[
<p>
<p>A few months ago I came across this
<a href="https://www.atlassian.com/git/tutorials/dotfiles"> article </a>
which explained how a bare git repository can be used to backup
dotfiles in the *NIX home directory. I messed around with it for a while
and finally ended up with a no-nonsense system for managing system dotfiles.</p>
<p>A bare git repository is almost like a regular git project that you might create
with <code>git init</code>. The only difference is that it doesn't have a specific
working tree but <em>only</em> the actual git repo
(i.e. the .git folder).</p>
<h1>Step One: Initializing the git repository</h1>
<p>This is as simple as running the commands:</p>
<pre><code>$ mkdir &quot;${XDG_CONFIG_HOME}/cfg&quot;
$ git init --bare &quot;${XDG_CONFIG_HOME}/cfg/.git/&quot;
</code></pre>
<p>If you've used git for any period of time then you know that the <code>git init</code>
command initializes an empty repository in the folder that you're currently in.
Since we want to create a bare repository, we pass the <code>--bare</code> flag and the
location of the git folder. This should create a <code>.git</code> folder in
<code>~/.config/cfg</code>. If you inspects its contents you'll find that they are similar
to any other repository's <code>.git</code> folder.</p>
<h1>Step Two: Accessing the repository via an alias/function</h1>
<p>Add the following line to your .zshrc or .bashrc along with the rest of your
aliases:</p>
<pre><code>cfg() { git --git-dir=&quot;${XDG_CONFIG_HOME}/cfg/.git/&quot; --work-tree=&quot;$HOME&quot; &quot;$@&quot; ; }
</code></pre>
<p>This function will allow us to stage and commit files to our backup repository.
The <code>--git-dir</code> flag specifies the git repository we made in step one and
<code>--work-tree</code> will allow us to track any file in our <code>$HOME</code> directory
using the repo.</p>
<h1>Step Three: Ignoring files we don't want to backup</h1>
<p>Run <code>exec $SHELl</code> or restart your terminal to make the alias we made in the
previous step available. Then, run the following command, so that the
repository doesn't display the hundreds of files in your home directory every
time you check it's <code>status</code>:</p>
<pre><code>$ cfg config --local status.showUntrackedFiles no
</code></pre>
<h1>Step Four: Setup a remote repository</h1>
<p>Create an empty remote repository (I will be using GitHub) and get its SSH or
HTTP. On GitHub this is immediately available after the repo is created.
Finally add the remote with:</p>
<pre><code>$ cfg remote add origin &lt;URL&gt;
</code></pre>
<p>At this point you can simply do something like:</p>
<pre><code>$ cfg add ~/.vimrc
$ cfg commit -m &quot;Adding .vimrc&quot;
$ cfg push origin master
</code></pre>
<p>This will make the repository start tracking your .vimrc and you can commit
and push the file to GitHub. Pretty much all git commands like <code>status</code> and
<code>diff</code> should now be available to you with the <code>cfg</code> function.</p>
<h1>Getting your dotfiles on a new system:</h1>
<p>Now all you have to do on a new system is run the following commands
and you'll have all your settings back:</p>
<pre><code>git init --bare &quot;${XDG_CONFIG_HOME}/cfg/.git/&quot;
cfg() { git --git-dir=&quot;${XDG_CONFIG_HOME}/cfg/.git/&quot; --work-tree=&quot;$HOME&quot; &quot;$@&quot; ; }
cfg config --local status.showUntrackedFiles no
cfg remote add origin https://github.com/nimaipatel/dotfiles.git
cfg pull origin master
</code></pre>
<p>You might get some errors if you already have, say, a .zshrc in your new
system. In this case you probably would want to delete this before pulling
your files from the remote.</p>
<p>That's it we're done ðŸ¥³. Please do tell me if you face any issues with the
script, in case you use it!</p>
&nbsp;
</p>
]]>
</description>
<pubDate>Thu, 12 Nov 2020 00:00:00 +0000</pubDate>
</item>


</channel>
</rss>
